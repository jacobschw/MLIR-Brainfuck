// RUN: Bf-opt %s --optbf-to-explicitbf > %t
// RUN: FileCheck %s < %t

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// The script is designed to make adding checks to
// a test case fast, it is *not* designed to be authoritative
// about what constitutes a good test! The CHECK should be
// minimized and named to reflect the test intent.


// CHECK-LABEL:   bf_pointer.ptr @bf_ptr = 0 : () -> ()
// CHECK:         memref.global "private" @bf_memory : memref<30000xi8>
// CHECK:         %[[VAL_0:.*]] = memref.get_global @bf_memory : memref<30000xi8>
// CHECK:         %[[VAL_1:.*]] = bf_pointer.read_ptr {name = @bf_ptr} : () -> index
// CHECK:         %[[VAL_2:.*]] = memref.load %[[VAL_0]]{{\[}}%[[VAL_1]]] : memref<30000xi8>
// CHECK:         %[[VAL_3:.*]] = arith.constant 1 : i8
// CHECK:         %[[VAL_4:.*]] = arith.addi %[[VAL_2]], %[[VAL_3]] : i8
// CHECK:         memref.store %[[VAL_4]], %[[VAL_0]]{{\[}}%[[VAL_1]]] : memref<30000xi8>
// CHECK:         %[[VAL_5:.*]] = memref.get_global @bf_memory : memref<30000xi8>
// CHECK:         %[[VAL_6:.*]] = bf_pointer.read_ptr {name = @bf_ptr} : () -> index
// CHECK:         %[[VAL_7:.*]] = memref.load %[[VAL_5]]{{\[}}%[[VAL_6]]] : memref<30000xi8>
// CHECK:         %[[VAL_8:.*]] = arith.constant -1 : i8
// CHECK:         %[[VAL_9:.*]] = arith.addi %[[VAL_7]], %[[VAL_8]] : i8
// CHECK:         memref.store %[[VAL_9]], %[[VAL_5]]{{\[}}%[[VAL_6]]] : memref<30000xi8>

bf_pointer.ptr @bf_ptr = 0 : () -> ()
memref.global "private" @bf_memory : memref<30000xi8>

bf_red.increment {amount = 1 : si8}

//---

bf_red.increment {amount = -1 : si8}